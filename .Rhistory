sapply(data, class)
lapply(data, class)
class(data)
data <- read.csv("activity.csv", header = TRUE)
sapply(class, data)
sapply(data, class)
data$date <- as.Date(data$date)
sapply(data, class)
aggregate(data, by=date, FUN=mean, na.rm=TRUE)
aggregate(data, by=list(date), FUN=mean, na.rm=TRUE)
aggregate(data, by=list(data$date), FUN=mean, na.rm=TRUE)
hist(data.mean)
hist(data.mean)
data.mean <- aggregate(data, by=list(data$date), FUN=mean, na.rm=TRUE)
hist(data.mean)
hist(data.mean$steps)
hist(data$steps)
hist(data$steps, main = "Total number of steps per day")
data.sum <- aggregate(data, by=list(data$date), FUN=sum, na.rm=TRUE)
hist(data.sum$steps, main = "Total number of steps each day")
data.sum <- aggregate(data, by=list(data$date), FUN=sum, na.rm=TRUE)
aggregate(data, by=list(data$date), FUN=sum, na.rm=TRUE)
aggregate(data, by=list(data$date), FUN=mean, na.rm=TRUE)
aggregate(data, by=list(data$date), FUN=mean, na.rm=TRUE)
?aggregate
data.sum <- aggregate(data$steps, by=list(data$date), FUN = sum, na.rm=TRUE)
hist(data.sum$steps, main = "Total number of steps each day")
data.sum
colnames(data.sum) <- c("date", "steps")
hist(data.sum$steps, main = "Total number of steps each day")
data.sum <- aggregate(data$steps, by=list(data$date), FUN = sum, na.rm=TRUE)
colnames(data.sum) <- c("date", "steps")
hist(data.sum$steps,
main = "Total number of steps each day",
xlab = "Number of steps")
mean(data.sum$steps)
median(data.sum$steps)
median(data.sum$steps)
data.avgint <- aggregate(data$steps, by=list(data$interval), FUN = mean, na.rm=TRUE)
colnames(data.sum) <- c("interval", "steps")
head(data.avgint)
colnames(data.avgint) <- c("interval", "steps")
head(data.avgint)
plot(data.avgint$interval,
data.avgint$steps,
type = "l")
plot(data.avgint$interval,
data.avgint$steps,
type = "l",
main = "Average number of steps taken per 5-minutes interval, across all days",
xlab = "5-minutes intervals",
ylab = "Average number of steps taken")
sum(!complete.cases(data))
nrow(data)
max(data.avgint$steps)
data.avgint[max(data.avgint$steps),]
data.avgint[data.avgint$steps == max(data.avgint$steps),]
data.tofill <- data[!complete.cases(data),]
head(data.tofill)
data.filled <- merge(data.tofill,
data.avgint,
by = "interval",
all.x = T)
head(data.filled)
data.tofill <- data[!complete.cases(data),c("date", "interval")]
data.filled <- merge(data.tofill,
data.avgint,
by = "interval",
all.x = T)
head(data.filled)
data.filled <- rbind(data.filled,
data[complete.cases(data),])
head(data-filled)
head(data.filled)
nrow(data.filled)
nrow(data)
nrow(data.filled) == nrwo(data)
nrow(data.filled) == nrow(data)
mean(data.filled.sum$steps) - mean(data.sum$steps)
?weekdays
# Reproducible Research: Peer Assessment 1
T. Favre-Bulle
## Loading and preprocessing the data
Using read.csv with header:
```{r load}
data <- read.csv("activity.csv", header = TRUE)
```
Convert the date column to Date format:
```{r convertdate}
data$date <- as.Date(data$date)
sapply(data, class)
```
## What is mean total number of steps taken per day?
Create a new dataframe data.sum, containing the total number of steps taken each day:
```{r datasum}
data.sum <- aggregate(data$steps, by=list(data$date), FUN = sum, na.rm=TRUE)
colnames(data.sum) <- c("date", "steps")
```
Make a histogram of the total number of steps taken each day using this dataframe:
```{r histsteps}
hist(data.sum$steps,
main = "Total number of steps taken each day",
xlab = "Number of steps")
```
**Mean** total number of steps taken per day:
```{r meansteps}
mean(data.sum$steps)
```
**Median** total number of steps taken per day:
```{r mediansteps}
median(data.sum$steps)
```
## What is the average daily activity pattern?
Create a new dataframe data.avgint with the average number of steps per 5-minutes interval, using the aggregate function:
```{r averagreinterval}
data.avgint <- aggregate(data$steps, by=list(data$interval), FUN = mean, na.rm=TRUE)
colnames(data.avgint) <- c("interval", "steps")
```
Time series plot of the 5-minute interval and the average number of steps taken, averaged across all days, using the new dataframe:
```{r plotaveragreinterval}
plot(data.avgint$interval,
data.avgint$steps,
type = "l",
main = "Average number of steps taken per 5-minutes interval, across all days",
xlab = "5-minutes intervals",
ylab = "Average number of steps taken")
```
Find the 5-minute interval that contains the maximum number of steps, on average across all the days in the dataset, using the max function:
```{r maxaveragreinterval}
data.avgint[data.avgint$steps == max(data.avgint$steps),]
```
## Imputing missing values
Total number of missing values in the dataset, by summing all the incomplete cases (invert of complete.cases):
```{r numNA}
sum(!complete.cases(data))
```
Strategy to fill missing data: replacing it by the average number of steps during the 5-minutes interval.
Create a new dataset data.filled where the missing data is replaced by the average number of steps during the 5-minutes interval across all days:
Create a data.tofill dataframe with all the missing cases, containing only date and interval columns:
```{r datatofill}
data.tofill <- data[!complete.cases(data),c("date", "interval")]
```
Left join this dataframe with the data.avgint dataframe containing the average number of steps during the 5-minutes interval across all days, by the interval column, retaining only cases from the data.tofill dataframe. This is equivalent to appending the average number of steps to the data.tofill dataframe:
```{r datafilledna}
data.filled <- merge(data.tofill,
data.avgint,
by = "interval",
all.x = T)
```
Bind the data.filled dataframe to the complete cases of the original data:
```{r datafilledbind}
data.filled <- rbind(data.filled,
data[complete.cases(data),])
```
Check if the new dataset data.filled has the same number of rows thna the original data:
```{r datafilledcheck}
nrow(data.filled) == nrow(data)
```
Create a new dataframe data.filled.sum, containing the total number of steps taken each day with replaced missing values:
```{r filleddatasum}
data.filled.sum <- aggregate(data.filled$steps, by=list(data.filled$date), FUN = sum, na.rm=TRUE)
colnames(data.filled.sum) <- c("date", "steps")
```
Make a histogram of the total number of steps taken each day using this dataframe:
```{r filledhiststeps}
hist(data.filled.sum$steps,
main = "Total number of steps taken each day with missing values replaced",
xlab = "Number of steps")
```
**Mean** total number of steps taken per day with missing values replaced:
```{r filledmeansteps}
mean(data.filled.sum$steps)
```
**Median** total number of steps taken per day with missing values replaced:
```{r filledmediansteps}
median(data.filled.sum$steps)
```
**Difference in mean** total number of steps taken per day with and without missing values replaced:
```{r diffmeansteps}
mean(data.filled.sum$steps) - mean(data.sum$steps)
```
**Difference in median** total number of steps taken per day with and without missing values replaced:
```{r diffmediansteps}
median(data.filled.sum$steps) - median(data.sum$steps)
```
Conclusion: in this particular case, missing data has a significant impact on the estimates of the total daily number of steps as it changes greatly the mean number of total daily steps. However, imputing missing data does not have a important impact on the median number of total daily steps.
## Are there differences in activity patterns between weekdays and weekends?
Conclusion: in this particular case, missing data has a significant impact on the estimates of the total daily number of steps as it changes greatly the mean number of total daily steps. However, imputing missing data does not have a important impact on the median number of total daily steps.
## Are there differences in activity patterns between weekdays and weekends?
source('~/.active-rstudio-document', echo=TRUE)
head(weekdays(data.filled$date))
?factor
data.filled$day <- factor(weekdays(data.filled$date))
head(data.filled)
?weekdays
dayType <- function(x) {
d <- weekdays(x)
if(d == "Saturday" | d == "Sunday") {
return "weekend"
} else {
return "weekday"
}
}
dayType <- function(x) {
d <- weekdays(x)
if(d == "Saturday" | d == "Sunday") {
return "weekend"
} else {
return "weekday"
}
}
dayType <- function(x) {
y <- weekdays(x)
if(y == "Saturday" | y == "Sunday") {
return "weekend"
} else {
return "weekday"
}
}
y <- weekdays(x)
dayType <- function(x) {}
head(data.filled)
dayType <- function(x) {
y <- weekdays(x)
if(y == "Saturday" || y == "Sunday") {
return "weekend"
} else {
return "weekday"
}
}
if(y == "Saturday" | y == "Sunday")
{}
?weekdays
x <- data.filled[1,2]
x
y <- weekdays(x)
y
if(y == "Saturday" | y == "Sunday") {
return "weekend"
} else {
return "weekday"
}
}
dayType <- function(x) {
y <- weekdays(x)
if(y == "Saturday" | y == "Sunday") {
return "weekend"
} else {
return "weekday"
}
}
dayType <- function(x) {
y <- weekdays(x)
if(y == "Saturday" | y == "Sunday") {return "weekend"}
else {return "weekday"}
}
dayType <- function(x) {
y <- weekdays(x)
if(y == "Saturday" | y == "Sunday") {
return("weekend")
} else {
return("weekday")
}
}
x
dayType(x)
data.filled$day <- factor(dayType(data.filled$date))
sapply(data.filled$date, dayType)
data.filled$day <- factor(sapply(data.filled$date, dayType))
head(data.filled)
data.avgint.bytype <- aggregate(data.filled$steps, by=list(data.filled$interval), FUN = mean, na.rm=TRUE)
head(data.avgint.byday)
head(data.avgint.bytype)
head(data.filled)
data.avgint.bytype <- aggregate(data.filled$steps, by=list(data.filled$interval, data.filled$day), FUN = mean, na.rm=TRUE)
head(data.filled)
head(data.avgint.bytype)
colnames(data.avgint.bytype) <- c("interval", "day", "steps")
library(lattice)
xyplot(steps ~ interval | day, data.avgint.bytype)
xyplot(steps ~ interval | day,
data = data.avgint.bytype,
layout = c(1,2))
xyplot(steps ~ interval | day,
data = data.avgint.bytype,
type = "l",
layout = c(1,2))
